Here is a short TODO list for pymedia

* pymedia.video.vcodec:

Decoding codecs:
- MPEG1-2 streams are played with with visible artefacts.
Problem: there is a demuxing problem in pymedia.video.demuxer and sometimes decoder gets corrupted stream. Solution: replace demuxer or fix existing library(libavformat).

Encoding codecs
- MPEG-2 video encoding triggers an assert in mpeg_motion_encode() after 100-200 frames. Problem happens inside libavcodec, for reasons yet unknown. Possible solution: something is wrong in codec setup, some parameter settings are missing or error in the ffmeg library.

* pymedia.video.muxer:
- Only MPEG multi-stream files can be created at the moment. 

- Audio and video streams are not synchronised properly in examples. 
Solution: PTS handling functions are implemented, but porting of logic shown in output_example.c in ffmpeg to python is needed.

* pymedia.audio.acodec:

Decoding codecs:

Encoding codecs:
- When encoding MP3 audio with bitrate 48000, SIGSEGV happens inside libmp3lame. Other bitrates are fine.
Problem source: not clear, but in some installations it happens with ffmpeg 0.4.8 as well, so it might be libavcodec problem. Solution: resampling can be used as a temporary fix. Or investigate the reason for crash inside mp3lame

- Only CBR streams are encoded. If bitrate of a frame changes in the middle of the stream, codec can crash.
Problem source: ffmpeg does not support creation of VBR. Solution: none

- AC3 encoding  crashes on assert in some streams
Problem source: not clear, happens inside libavcodec. Solution: investigate the reason for assert in AC3 encoding algorithm

- Encoding buffers are limited to 100000 bytes. If any codec outputs bigger single frame, codec may crash. There is no workaround for it as the maxframe size is not known.
Problem source: some codecs (e.g. vorbix) buffer a lot of data before spitting out huge chunk of encoded data in the beginning of the file. Solution: find out maximum size of output frame and implement it in the buffer.
